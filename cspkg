#!/usr/bin/env cs
#
# Covariant Script Package Manager v2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Copyright (C) 2017-2021 Michael Lee(李登淳)
#
# Email:   lee@covariant.cn, mikecovlee@163.com
# Github:  https://github.com/mikecovlee
# Website: http://covscript.org.cn
#
# Config File Structural
#
# ~/.cspkg
#   config.json
#   packages.json
#

import codec.json as json
import process

namespace utils
    function open_json(path)
        var ifs = iostream.ifstream(path)
        return json.to_var(json.from_stream(path))
    end
    function filter(str, cond)
        var _s = ""
        foreach ch in str
            if cond(ch)
                _s += ch
            end
        end
        return move(_s)
    end
end

namespace env
    function user_home()
        if system.is_platform_windows()
            return system.getenv("USERPROFILE")
        else
            return system.getenv("HOME")
        end
    end
    function covscript_home()
        try
            return system.getenv("COVSCRIPT_HOME")
        catch e; end
        if system.is_platform_windows()
            return env.user_home() + system.path.separator + "Documents" + system.path.separator + "CovScript"
        end
        if system.is_platform_linux()
            return "/usr/share/covscript"
        end
        if system.is_platform_macos()
            return "/Applications/CovScript.app/Contents/MacOS/covscript"
        end
    end
    function platform()
        if system.is_platform_windows()
            return "windows"
        end
        if system.is_platform_linux()
            return "linux"
        end
        if system.is_platform_macos()
            return "macos"
        end
    end
    function arch()
        if system.is_platform_unix()
            var p = process.exec("arch", {})
            return p.out().getline()
        else
            var p = process.exec("wmic", {"OS", "GET", "OSArchitecture"}); p.out().getline()
            var name = utils.filter(p.out().getline(), [](ch)->!ch.isspace())
            switch name
                default
                    throw runtime.exception("Unrecognizable platform name: " + name)
                end
                case "64-bit"
                    return "x86_64"
                end
                case "32-bit"
                    return "i386"
                end
            end
        end
    end
end

namespace config
    constant version = "2.0"
    @begin
    var content = {
        "arch" : env.arch(),
        "home" : env.covscript_home(),
        "timeout_ms" : 1000,
        "sources" : {
            "https://raw.githubusercontent.com/covscript/cspkg-sources/main/index.json"
        }
    }.to_hash_map()
    @end
    function compose_home()
        return env.user_home() + ".cspkg"
    end
    function compose_log()
        return env.user_home() + ".cspkg" + system.path.separator + "cspkg.log"
    end
    function compose_config()
        return env.user_home() + ".cspkg" + system.path.separator + "config.json"
    end
    function compose_packages()
        return env.user_home() + ".cspkg" + system.path.separator + "packages.json"
    end
    function create()

    end
    function init()
        if !system.file.exists(compose_home()) || !system.file.exists(compose_config()) || !system.file.exists(compose_packages())
            create()
        else

        end
    end
end

function cspkg_log(msg)
    system.out.println(msg)
    # Write log here
end

# Command Line Parser

class cspkg_config
    function run(opt, args)
        config.init()
    end
end

function run_config(opt, args)
    (new cspkg_config).run(opt, args)
end

function show_help(opt, args)
@begin
    system.out.println(
        "Usage: cspkg <commands> [options] ...\n" +
        "\nCommands:\n" +
        "    install   | -i  <Package>...  Install packages from remote source\n" +
        "    remove    | -r  <Package>...  Remove packages\n" +
        "    config    | -c                Manage local configuration\n" +
        "    upgrade   | -u                Upgrade local packages\n" +
        "    clean     | -x                Automatically remove useless packages\n" +
        "    list      | -l                List current packages\n" +
        "    help      | -h                Show help information\n" +
        "    version   | -v                Show version information\n" +
        "\nOptions:\n" +
        "    --local   <Path>              Install from local source(will treat target field as local path)\n" +
        "    --set     <Key> <Value>       Set a configuration key\n" +
        "    --unset   <Key>               Restore a configuration key to default\n" +
        "    --merge   <Path>              Merge a json file into cspkg configuration\n" +
        "    --export  <Path>              Export cspkg configuration into a json file\n"
    )
@end
end

function show_version(opt, args)
@begin
    system.out.println(
        "Covariant Script Package Manager " + config.version + "\n" +
        "\nEnvironment Variables:\n" +
        "            OS: " + env.platform() + "\n" +
        "          ARCH: " + env.arch() + "\n" +
        "     USER_HOME: " + env.user_home() + "\n" +
        "COVSCRIPT_HOME: " + env.covscript_home() + "\n"
    )
@end
end

function command_error(cmd)
@begin
    system.out.println(
        "cspkg: \'" + cmd + "\' is not a cspkg command. See \'csman help\'\n"
    )
@end
end

var cmd_args = context.cmd_args

if cmd_args.size == 1
    show_help(null, null)
    system.exit(0)
end

@begin
var cspkg_cmds = {
    "config" : run_config,
    "-c" : run_config,
    "help" : show_help,
    "-h" : show_help,
    "version" : show_version,
    "-v" : show_version
}.to_hash_map()
@end

var cspkg_options = {}
var cspkg_args = {}

# Processing CLI Args

var target_function = cspkg_cmds[cmd_args[1]]

if target_function == 0
    command_error(cmd_args[1])
    system.exit(0)
end

block
    var idx = 2
    while idx != cmd_args.size
        if cmd_args[idx].find("--", 0) == 0
            cspkg_options.push_back(cmd_args[idx])
        else
            break
        end
        ++idx
    end
    while idx != cmd_args.size
        cspkg_args.push_back(cmd_args[idx])
        ++idx
    end
end

target_function(cspkg_options, cspkg_args)